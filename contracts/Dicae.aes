// ISC License
//
// Copyright (c) 2017, anonymous
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
// LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
// OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.
//
// THIS IS NOT SECURITY AUDITED
// DO NEVER USE THIS WITHOUT SECURITY AUDIT FIRST
//


/*
 * **DICAE** is a betting game ran on top of Aeternity blockchain,
 * this particilar implementation is done with Sophia ML
 * 
 * The game allows a player to place a bet on certain number
 * between 1 and 6 once in a betting session.
 * When the betting session is closed and bet results are calculated
 * the players who correctly guessed the number that the dice smart contract
 * rolled will receive AE tokens distributed as winning award. Funds from
 * bets of those players who did not succeeded guessing the correct
 * dice result will be stored in the smart contract for future
 * award distribution payments. 
 */
contract Dicae =

  record state = 
    { sessions: map(int, session)
    , bet_price: int
    , bet_id: int
    , bet_session_duration: int
    , bet_winning_coeficient: int
    , session_id: int
    , players: map(address, player)
    , system: system
    , owner: address }
  
  record bet = 
    { id: int
    , number: int
    , player_address: address }

  record session = 
    { session_id: int
    , block_id: int
    , block_end: int
    , bets: list(bet)
    , calculated: bool
    , winning_number: option(int) }

  record player = 
    { total_bets: int
    , pending_balance: int }

  record system = 
    { null_bytes: bytes(32)
    , valid_bets: map(int, int)
    , fee: int
    , collected_fees: int }
    
  stateful entrypoint init() : state = 
    let bet_session_duration = 2 // blocks
    let session_id = 0 // initial session id
    { bet_id = 0,
      session_id = session_id,
      bet_price = 1000000000000000000,
      bet_session_duration = bet_session_duration,
      bet_winning_coeficient = 5,
      sessions = {},
      players = {},
      system = { null_bytes = #000000000000000000000000000000000000000000000000000000000000000,
                valid_bets = {
                  [1] = 1,
                  [2] = 2,
                  [3] = 3,
                  [4] = 4,
                  [5] = 5,
                  [6] = 6 },
                fee = 5, // percent
                collected_fees = 0 },
      owner = Call.caller }

  entrypoint get_session_id() : int = state.session_id
  entrypoint get_session_by_id(session_id: int) : session = state.sessions[session_id]
  entrypoint get_current_session() : session = state.sessions[state.session_id]
  entrypoint get_session_duration() : int = state.bet_session_duration
  entrypoint get_session_winning_number() : int = state.bet_session_duration
  entrypoint get_players() : map(address, player) = state.players
  entrypoint get_player_by_address(player: address) : option(player) = Map.lookup(player, state.players)
  entrypoint get_bet_price() : int = state.bet_price
  entrypoint get_bets_for_session(session_id : int) : list(bet) = state.sessions[session_id].bets 
  entrypoint get_random() : int = random()

  stateful entrypoint bet(number: int) : () =
    is_bet_valid(number)
    reset_session_if_needed()
    is_player_session_bet_allowed()
    is_amount_enough()
    is_player()
    let new_bet_id = state.bet_id + 1
    let bet = { id = new_bet_id
              , number = number
              , player_address = Call.caller }
    put(state{ bet_id = new_bet_id })
    put(state{ sessions[state.session_id].bets = bet :: state.sessions[state.session_id].bets })
    put(state{ players[Call.caller].total_bets = state.players[Call.caller].total_bets + 1 })

  stateful entrypoint calculate_winners() : session =
    let current_session_id = state.session_id
    reset_session_if_needed()
    state.sessions[current_session_id]

  stateful entrypoint withdraw() : () =
    is_player_balance_positive()
    let balance_for_withdraw_before_fee = state.players[Call.caller].pending_balance
    let fee = balance_for_withdraw_before_fee / 100 * state.system.fee
    let balance_for_withdraw = balance_for_withdraw_before_fee - fee
    put(state{ system.collected_fees = state.system.collected_fees + fee })
    put(state{ players[Call.caller].pending_balance = 0 })
    Chain.spend(Call.caller, balance_for_withdraw)

  stateful entrypoint withdraw_fee() : () =
    only_owner()
    Chain.spend(state.owner, state.system.collected_fees)
    put(state{ system.collected_fees = 0 })

    // PRIVATE FUNCTIONS AND ACCESS MODIFIERS
  stateful function calculate_session_results() : () = 
    let winning_number : int = random()
    map_function(filter_winning(winning_number), state.sessions[state.session_id].bets)
    put(state{ sessions[state.session_id].winning_number = Some(winning_number) })

  stateful function filter_winning(random_winning_number: int) : (bet => bool) = (bet) =>
    if (bet.number == random_winning_number)
      put(state{ players[bet.player_address].pending_balance = state.players[bet.player_address].pending_balance + (state.bet_price * state.bet_winning_coeficient) })
    (bet.number == random_winning_number)

  function map_function(f : 'a => 'b, l : list('a)) : list('b) =
    switch(l)
      [] => []
      e :: l' => f(e) :: map_function(f, l')	

  function random() : int =
    let random_number : int = (
      Bytes.to_int(
        Crypto.sha3(
          random_hash(5, state.system.null_bytes)
        )
      ) mod 6) + 1
    random_number

  function random_hash(blocks: int, result: bytes(32)) : bytes(32) =
    switch(blocks)
      0 => result
      _ => random_hash(blocks - 1, Crypto.sha3(String.concat(Bytes.to_str(result), Bytes.to_str(eval(Chain.block_hash(Chain.block_height - blocks))))))
        
  function eval(x: option(bytes(32))) : bytes(32) =
    switch(x)
      None => state.system.null_bytes
      Some(x) => x

  stateful function reset_session() : () =
    calculate_session_results()
    let new_session_id = state.session_id + 1
    put(state{ session_id = new_session_id })
    create_new_session(new_session_id)

  stateful function create_new_session(session_id: int) : () =
    put(state{ sessions[session_id] = { session_id = session_id,
                                            block_id = Chain.block_height,
                                            block_end = Chain.block_height + state.bet_session_duration,
                                            bets = [],
                                            calculated = false,
                                            winning_number = None } })

  stateful function reset_session_if_needed() : () =
    switch(Map.size(state.sessions))
      0 => create_new_session(state.session_id)
      _ => 
        if (Chain.block_height >= state.sessions[state.session_id].block_end)
          reset_session()

  stateful function is_player() : () =
    let player_found = Map.lookup_default(Call.origin, state.players, {total_bets = 0, pending_balance = 0})
    if (player_found.total_bets == 0)
      put(state{ players[Call.origin] = {total_bets = 0, pending_balance = 0} })

  function is_amount_enough() : () =
    require(Call.value == state.bet_price, "INSUFFICIENT_VALUE_PROVIDED")
    
  function is_player_balance_positive() : () =
    require(state.players[Call.caller].pending_balance > 0, "INSUFFICIENT_BALANCE")
    
  function is_bet_valid(number: int) : () =
    require(Map.member(number, state.system.valid_bets), "INVALID_BET_NUMBER")

  function is_player_session_bet_allowed() : () =
    let result =
      switch(filter((bet) => (is_player_betted(bet)), state.sessions[state.session_id].bets))
        [] => true
        _  => false
    require(result, "SESSION_BET_ALREADY_PRESENT")

  function is_player_betted(bet: bet) : bool =
    bet.player_address == Call.caller

  function filter(f : ('a) => bool, l : list('a)) = filter'(f, l, [])
  function filter'(f : ('a) => bool, l : list('a), acc : list('a)) =
    switch(l)
      [] => acc
      e :: l' =>
        if(f(e))
          filter'(f, l', e :: acc)
        else
          filter'(f, l', acc)

  function only_owner() : () = require(Call.caller == state.owner, "UNAUTHORIZED")