// ISC License
//
// Copyright (c) 2017, Milen Radkov <milenradkov@me.com>
//
// Permission to use, copy, modify, and/or distribute this software for any
// purpose with or without fee is hereby granted, provided that the above
// copyright notice and this permission notice appear in all copies.
//
// THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
// REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
// AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
// INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
// LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE
// OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
// PERFORMANCE OF THIS SOFTWARE.
//
// THIS IS NOT SECURITY AUDITED
// DO NEVER USE THIS WITHOUT SECURITY AUDIT FIRST
//
// Dicæ is a betting game on top of Æternity blockchain, implemented with Sophia ML  


contract Dicae =
    
    record bet = { id: int
                 , number: int
                 , player_address: address }

    record session = { session_id: int
                     , block_id: int
                     , bets: list(bet)
                     , calculated: bool }

    record player = { total_bets: int
                    , pending_balance: int }

    record state = { sessions: map(int, session)
                   , bet_price: int
                   , bet_id: int
                   , bet_winning_coeficient: int
                   , session_id: int
                   , players: map(address, player)
                   , null_bytes: bytes(32) }
    
    stateful entrypoint init() : state = { bet_id = 0
                                      , session_id = 0
                                      , bet_price = 1
                                      , bet_winning_coeficient = 5
                                      , sessions = {[0] = {session_id = 0, block_id = Chain.block_height -1,  bets = [], calculated = false}}
                                      , players = {}
                                      , null_bytes = #000000000000000000000000000000000000000000000000000000000000000 }

    stateful entrypoint bet(number: int) =
        reset_session_if_needed()
        is_amount_enough()
        is_player()
        let bet = { id = state.bet_id +1
                  , number = number
                  , player_address = Call.caller }
        put(state{ bet_id = bet.id
                 , sessions[state.session_id].bets = bet :: state.sessions[state.session_id].bets
                 , players[Call.caller].total_bets = state.players[Call.caller].total_bets + 1 })

    entrypoint get_random() : int = random()

    stateful entrypoint withdraw() =
        is_player_balance_positive()
        let balance_for_withdraw = state.players[Call.caller].pending_balance
        put(state{
            players[Call.caller].pending_balance = 0 })
        Chain.spend(Call.caller, balance_for_withdraw)

    // Private and helper functions
    private stateful function calculate_session_results() = 
        map_function(filter_winning(random()), state.sessions[state.session_id].bets)

    private stateful function filter_winning(random_winning_number: int) : (bet => bool) = (bet) =>
        if (bet.number == random_winning_number)
            put(state{
                players[bet.player_address].pending_balance = state.players[bet.player_address].pending_balance + (state.bet_price * state.bet_winning_coeficient) })
        (bet.number == random_winning_number)

    private function map_function(f : 'a => 'b, l : list('a)) : list('b) =
        switch(l)
            [] => []
            e :: l' => f(e) :: map_function(f, l')	

    private function random() : int = 
        Bytes.to_int(Crypto.sha3(random_hash(5, state.null_bytes))) mod 6

    private function random_hash(blocks: int, result: bytes(32)) : bytes(32) =
        switch(blocks)
            0 => result
            _ => random_hash(blocks - 1, Crypto.sha3(String.concat(Bytes.to_str(result), Bytes.to_str(eval(Chain.block_hash(Chain.block_height - blocks))))))
        
    private function eval(x: option(bytes(32))) : bytes(32) =
        switch(x)
            None => state.null_bytes
            Some(x) => x

    private stateful function reset_session() =
        calculate_session_results()
        put(state{ session_id = state.session_id + 1})

    private stateful function reset_session_if_needed() =
        if (Chain.block_height >= state.sessions[state.session_id].block_id + 5)
            reset_session()

    private stateful function is_player() =
        let player_found = lookupByAddress(Call.origin, state.players, {total_bets = 0, pending_balance = 0})
        if (player_found.total_bets == 0)
            put(state{ players[Call.origin] = {total_bets = 0, pending_balance = 0} })

    private function lookupByAddress(k : address, m, v) =
        switch(Map.lookup(k,m))
            None => v
            Some(x) => x

    private function is_amount_enough() =
        require(Call.value < state.bet_price, "INSUFFICIENT_VALUE_PROVIDED")
    
    private function is_player_balance_positive() =
        require(state.players[Call.caller].pending_balance > 0, "INSUFFICIENT_BALANCE")