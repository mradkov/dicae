#! /usr/bin/env node
'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _package = require('../package.json');

var _traverser = require('./traverser');

var _traverser2 = _interopRequireDefault(_traverser);

var _validator = require('./validator');

var _validator2 = _interopRequireDefault(_validator);

var _excludes = require('./excludes');

var _excludes2 = _interopRequireDefault(_excludes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// -h, --help
// -d, --dry
// -s, --src
// -D?, --dest
// -e, --exclude
// -o, --override
// -v, --version
// -p, --path

var argv = require('minimist')(process.argv.slice(2));

var rename = function rename(args) {
  var _ = args._,
      dry = args.dry,
      exclude = args.exclude,
      help = args.help,
      override = args.override,
      path = args.path,
      version = args.version;


  if (version) {
    return console.log(_package.version);
  }

  if (help) {
    return console.log('TODO');
  }
  var src = _[0];
  var dest = _[1];

  var _ref = new _excludes2.default(exclude),
      excludes = _ref.excludes;

  var options = {
    excludes: excludes,
    override: override,
    path: path };

  var validator = new _validator2.default(src, dest, options);

  return executeCommand(validator, dry);
};

var executeCommand = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(validator, dry) {
    var src, dest, excludes, path, traverser;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            src = validator.src, dest = validator.dest, excludes = validator.excludes, path = validator.path;
            traverser = new _traverser2.default(path, {
              src: src,
              dest: dest,
              excludes: excludes
            });
            _context.next = 4;
            return traverser.traverse({ dry: dry });

          case 4:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function executeCommand(_x, _x2) {
    return _ref2.apply(this, arguments);
  };
}();

rename(argv);