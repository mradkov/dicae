'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _colors = require('colors');

var _colors2 = _interopRequireDefault(_colors);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _bluebird = require('bluebird');

var _bluebird2 = _interopRequireDefault(_bluebird);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var fs = _bluebird2.default.promisifyAll(require('fs'));

var readdirAsync = fs.readdirAsync,
    renameAsync = fs.renameAsync,
    statAsync = fs.statAsync;

var Traverser = function () {
  function Traverser(initialPath, options) {
    (0, _classCallCheck3.default)(this, Traverser);
    var excludes = options.excludes,
        dest = options.dest,
        src = options.src;


    this.initialPath = initialPath;
    this.excludes = excludes;
    this.dest = dest;
    this.src = src;
  }

  (0, _createClass3.default)(Traverser, [{
    key: 'traverse',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        var rootPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.initialPath;

        var dry, files, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, file, filePath, stats;

        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                dry = options.dry;
                _context.next = 3;
                return readdirAsync(rootPath);

              case 3:
                files = _context.sent;
                _iteratorNormalCompletion = true;
                _didIteratorError = false;
                _iteratorError = undefined;
                _context.prev = 7;
                _iterator = (0, _getIterator3.default)(files);

              case 9:
                if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                  _context.next = 25;
                  break;
                }

                file = _step.value;
                filePath = makePath(rootPath, file);
                _context.next = 14;
                return statAsync(filePath);

              case 14:
                stats = _context.sent;

                if (!(stats.isDirectory() && !this.excludes.has(file))) {
                  _context.next = 20;
                  break;
                }

                _context.next = 18;
                return this.traverse(options, filePath);

              case 18:
                _context.next = 22;
                break;

              case 20:
                _context.next = 22;
                return handleFile(file, filePath, this.src, this.dest, dry);

              case 22:
                _iteratorNormalCompletion = true;
                _context.next = 9;
                break;

              case 25:
                _context.next = 31;
                break;

              case 27:
                _context.prev = 27;
                _context.t0 = _context['catch'](7);
                _didIteratorError = true;
                _iteratorError = _context.t0;

              case 31:
                _context.prev = 31;
                _context.prev = 32;

                if (!_iteratorNormalCompletion && _iterator.return) {
                  _iterator.return();
                }

              case 34:
                _context.prev = 34;

                if (!_didIteratorError) {
                  _context.next = 37;
                  break;
                }

                throw _iteratorError;

              case 37:
                return _context.finish(34);

              case 38:
                return _context.finish(31);

              case 39:
                return _context.abrupt('return', _bluebird2.default.resolve());

              case 40:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this, [[7, 27, 31, 39], [32,, 34, 38]]);
      }));

      function traverse() {
        return _ref.apply(this, arguments);
      }

      return traverse;
    }()
  }]);
  return Traverser;
}();

var handleFile = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(file, filePath, src, dest, dry) {
    var splitFilePath, filePathNoExt, srcExt;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            splitFilePath = filePath.split('.');
            filePathNoExt = splitFilePath[0];
            srcExt = splitFilePath[1];

            if (!(srcExt === src)) {
              _context2.next = 11;
              break;
            }

            if (!dry) {
              _context2.next = 8;
              break;
            }

            console.log('Will Rename: '.blue + ('' + filePath).red + ' --> '.yellow + (filePathNoExt + '.' + dest).green);
            _context2.next = 11;
            break;

          case 8:
            console.log('Renamed: '.blue + ('' + filePath).red + ' --> '.yellow + (filePathNoExt + '.' + dest).green);
            _context2.next = 11;
            return renameAsync(filePath, filePathNoExt + '.' + dest);

          case 11:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function handleFile(_x3, _x4, _x5, _x6, _x7) {
    return _ref2.apply(this, arguments);
  };
}();

var makePath = function makePath() {
  var base = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : __dirname;
  var file = arguments[1];
  return _path2.default.join(base, file);
};

exports.default = Traverser;