'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _set = require('babel-runtime/core-js/set');

var _set2 = _interopRequireDefault(_set);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Validator = function () {
  function Validator(src, dest, options) {
    (0, _classCallCheck3.default)(this, Validator);

    this._determineExtenstions(src, dest);
    this._handleOptions(options);
  }

  (0, _createClass3.default)(Validator, [{
    key: '_determineExtenstions',
    value: function _determineExtenstions(src, dest) {
      this._src = src;
      this._dest = dest;

      if (!this._src || !this._dest) {
        throw new Error('A source and destination are required');
      }
    }
  }, {
    key: '_handleOptions',
    value: function _handleOptions() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if ((typeof options === 'undefined' ? 'undefined' : (0, _typeof3.default)(options)) !== 'object') {
        throw new Error('When supplied options they must be an object');
      }

      var excludes = options.excludes,
          override = options.override,
          _options$path = options.path,
          path = _options$path === undefined ? '.' : _options$path;


      this.path = path;

      if (excludes) this._handleExcludes(excludes);
      if (override) this._handleOverride(override);
    }
  }, {
    key: '_handleExcludes',
    value: function _handleExcludes(excludes) {
      if (excludes && excludes.constructor !== _set2.default) {
        throw new Error('Excludes must be a set');
      }

      this.excludes = excludes;
    }
  }, {
    key: '_handleOverride',
    value: function _handleOverride(override) {
      if (typeof override !== 'boolean') {
        throw new Error('Override must be a boolean');
      }

      this.override = override;
    }
  }, {
    key: 'src',
    get: function get() {
      return this._src;
    }
  }, {
    key: 'dest',
    get: function get() {
      return this._dest;
    }
  }]);
  return Validator;
}();

exports.default = Validator;